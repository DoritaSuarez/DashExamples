import json
import os
import time
import uuid
from copy import deepcopy
import csv
import sys
import pathlib
import importlib
import boto3
import dash
import dash_core_components as dcc
import dash_html_components as html
import requests
from dash.dependencies import Input, Output, State
from flask_caching import Cache
import dash_bootstrap_components as dbc
import dash_html_components as html

drc = importlib.import_module("dash_reusable_components")
utils = importlib.import_module("utils")

DEBUG = True
LOCAL = False
APP_PATH = str(pathlib.Path(__file__).parent.resolve())

app = dash.Dash(__name__)
server = app.server

# if "BUCKET_NAME" in os.environ:
#     # Change caching to redis if hosted on dds
#     cache_config = {
#         "CACHE_TYPE": "redis",
#         "CACHE_REDIS_URL": os.environ["REDIS_URL"],
#         "CACHE_THRESHOLD": 400,
#     }
# # Local Conditions
# else:
#     LOCAL = True
#     # Caching with filesystem when served locally
#     cache_config = {
#         "CACHE_TYPE": "filesystem",
#         "CACHE_DIR": os.path.join(APP_PATH, "data"),
#     }

# # S3 Client. It is used to store user images. The bucket name
# # is stored inside the utils file, the key is
# # the session id generated by uuid

# access_key_id = os.environ.get("ACCESS_KEY_ID")
# secret_access_key = os.environ.get("SECRET_ACCESS_KEY")
# bucket_name = os.environ.get("BUCKET_NAME")

# # Empty cache directory before running the app
# folder = os.path.join(APP_PATH, "data")
# for the_file in os.listdir(folder):
#     file_path = os.path.join(folder, the_file)
#     try:
#         if os.path.isfile(file_path):
#             os.unlink(file_path)
#     except Exception as e:
#         print(e)

# # If local, image data is stored locally in image_string.csv
# if LOCAL:
#     f = open("image_string.csv", "w+")
#     f.close()

#     # Store images are very long strings, so allowed csv
#     # reading length is increased to its maximum allowed value
#     maxInt = sys.maxsize
#     while True:
#         # decrease the maxInt value by factor 10
#         # as long as the OverflowError occurs.
#         try:
#             csv.field_size_limit(maxInt)
#             break
#         except OverflowError:
#             maxInt = int(maxInt / 10)

# if not LOCAL:
#     s3 = boto3.client(
#         "s3",
#         endpoint_url="https://storage.googleapis.com",
#         aws_access_key_id=access_key_id,
#         aws_secret_access_key=secret_access_key,
#     )

# # Caching
# cache = Cache()
# cache.init_app(app.server, config=cache_config)


# # Store key value value (session_id, stringed_image)
# def store_image_string(string_image, key_name):
#     if DEBUG:
#         print(key_name)
#     # If local, the string is stored in image_string.csv
#     if LOCAL:
#         with open("image_string.csv", mode="w+") as image_file:
#             image_writer = csv.DictWriter(image_file, fieldnames=["key", "image"])
#             image_writer.writeheader()
#             image_writer.writerow(dict(key=key_name, image=string_image))
#     # Generate the POST attributes
#     else:
#         post = s3.generate_presigned_post(Bucket=bucket_name, Key=key_name)

#         files = {"file": string_image}
#         # Post the string file using requests
#         requests.post(post["url"], data=post["fields"], files=files)


def serve_layout():
    # Generates a session ID
    session_id = str(uuid.uuid4())

    # Post the image to the right key, inside the bucket named after the
    # session ID
    # store_image_string(utils.IMAGE_STRING_PLACEHOLDER, session_id)

    # App Layout
    return html.Div(
        id="root",
        children=[
            # Session ID
            html.Div(session_id, id="session-id"),
            html.Div(
    [
        dbc.Alert(
            [
                "This is a primary alert with an ",
                html.A("example link", href="#", className="alert-link"),
            ],
            color="primary",
        ),
        dbc.Alert(
            [
                "This is a danger alert with an ",
                html.A("example link", href="#", className="alert-link", id="alerta"),
            ],
            color="danger",
        ),
    ]
),
            # Main body
            html.Div(
                id="app-container",
                children=[
                    # Banner display
                    html.Div(
                        id="banner",
                        children=[
                            html.Img(
                                # id="logo", src=app.get_asset_url("dash-logo-new.png")
                            ),
                            # html.H2("Image Processing App", id="title"),
                        ],
                    ),
                    html.Div(
                        id="image",
                        children=[
                            # The Interactive Image Div contains the dcc Graph
                            # showing the image, as well as the hidden div storing
                            # the true image
                            html.Div(
                                id="div-interactive-image",
                                children=[
                                    utils.GRAPH_PLACEHOLDER,
                                    html.Div(
                                        id="div-storage",
                                        children=utils.STORAGE_PLACEHOLDER,
                                    ),
                                ],
                            )
                        ],
                    ),
                ],
            ),
            # Sidebar
            html.Div(
                id="sidebar",
                children=[
                    drc.Card(
                        [
                            dcc.Upload(
                                id="upload-image",
                                children=[
                                    "Drag and Drop or ",
                                    html.A(children="Select an Image"),
                                ],
                                # No CSS alternative here
                                style={
                                    "color": "darkgray",
                                    "width": "100%",
                                    "height": "50px",
                                    "lineHeight": "50px",
                                    "borderWidth": "1px",
                                    "borderStyle": "dashed",
                                    "borderRadius": "5px",
                                    "borderColor": "darkgray",
                                    "textAlign": "center",
                                    "padding": "2rem 0",
                                    "margin-bottom": "2rem",
                                },
                                accept="image/*",
                            ),
                            drc.NamedInlineRadioItems(
                                name="Selection Mode",
                                short="selection-mode",
                                options=[
                                    {"label": " Lasso", "value": "lasso"},
                                ],
                                val="lasso",
                            ),
                            
                        ]
                    ),
                ],
            ),
        ],
    )


app.layout = serve_layout


@app.callback(
    Output("interactive-image", "figure"),
    [Input("radio-selection-mode", "value")],
    [State("interactive-image", "figure")],
)
def update_selection_mode(selection_mode, figure):
    if figure:
        figure["layout"]["dragmode"] = selection_mode
    return figure


# Running the server
if __name__ == "__main__":
    app.run_server(debug=True)

